import os
import time
import hmac
import hashlib
import requests
import pandas as pd
import numpy as np

API_KEY = os.getenv("BINGX_API_KEY")
API_SECRET = os.getenv("BINGX_API_SECRET")
BASE_URL = "https://api.bingx.com/api/v3/futures"

# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
TIMEFRAMES = ["1m", "5m", "15m", "1h"]

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞
def sign_request(params, secret):
    query_string = "&".join([f"{key}={params[key]}" for key in sorted(params)])
    signature = hmac.new(secret.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    return signature

# –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤
def get_candles(symbol, interval, limit=50):
    path = "/market/kline"
    url = BASE_URL + path
    params = {
        "symbol": symbol,
        "interval": interval,
        "limit": limit,
        "timestamp": int(time.time() * 1000)
    }
    params["sign"] = sign_request(params, API_SECRET)
    headers = {
        "X-BX-APIKEY": API_KEY
    }
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()
        if data["success"] != True or "data" not in data:
            return None
        df = pd.DataFrame(data["data"])
        df = df.rename(columns={
            "open": "open",
            "close": "close",
            "high": "high",
            "low": "low",
            "volume": "volume",
            "timestamp": "time"
        })
        # –í BingX timestamp –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –≤ –º—Å
        df["time"] = pd.to_datetime(df["time"], unit='ms')
        df = df.astype({
            "open": float,
            "close": float,
            "high": float,
            "low": float,
            "volume": float,
        })
        return df
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

def EMA(series, period):
    return series.ewm(span=period, adjust=False).mean()

def RSI(series, period=14):
    delta = series.diff()
    gain = delta.where(delta > 0, 0.0)
    loss = -delta.where(delta < 0, 0.0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def MACD(series, fast=12, slow=26, signal=9):
    ema_fast = EMA(series, fast)
    ema_slow = EMA(series, slow)
    macd_line = ema_fast - ema_slow
    signal_line = EMA(macd_line, signal)
    histogram = macd_line - signal_line
    return macd_line, signal_line, histogram

def ATR(df, period=14):
    high_low = df["high"] - df["low"]
    high_close = np.abs(df["high"] - df["close"].shift())
    low_close = np.abs(df["low"] - df["close"].shift())
    tr = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
    atr = tr.rolling(window=period).mean()
    return atr

# –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏

def is_bullish_engulfing(df):
    # –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ ‚Äî –±—ã—á—å—è –∏ —Ç–µ–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–ª–æ—â–∞–µ—Ç —Ç–µ–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–µ–¥–≤–µ–∂—å–µ–π —Å–≤–µ—á–∏
    cond1 = (df["close"].iloc[-1] > df["open"].iloc[-1])
    cond2 = (df["close"].iloc[-2] < df["open"].iloc[-2])
    cond3 = (df["open"].iloc[-1] < df["close"].iloc[-2])
    cond4 = (df["close"].iloc[-1] > df["open"].iloc[-2])
    return cond1 and cond2 and cond3 and cond4

def is_bearish_engulfing(df):
    # –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ ‚Äî –º–µ–¥–≤–µ–∂—å—è –∏ —Ç–µ–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–ª–æ—â–∞–µ—Ç —Ç–µ–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±—ã—á—å–µ–π —Å–≤–µ—á–∏
    cond1 = (df["close"].iloc[-1] < df["open"].iloc[-1])
    cond2 = (df["close"].iloc[-2] > df["open"].iloc[-2])
    cond3 = (df["open"].iloc[-1] > df["close"].iloc[-2])
    cond4 = (df["close"].iloc[-1] < df["open"].iloc[-2])
    return cond1 and cond2 and cond3 and cond4

def is_hammer(df):
    body = abs(df["close"].iloc[-1] - df["open"].iloc[-1])
    lower_shadow = df["open"].iloc[-1] - df["low"].iloc[-1] if df["open"].iloc[-1] > df["close"].iloc[-1] else df["close"].iloc[-1] - df["low"].iloc[-1]
    upper_shadow = df["high"].iloc[-1] - max(df["open"].iloc[-1], df["close"].iloc[-1])
    return (lower_shadow > 2 * body) and (upper_shadow < body)

def is_doji(df, tolerance=0.001):
    return abs(df["close"].iloc[-1] - df["open"].iloc[-1]) <= (df["open"].iloc[-1] * tolerance)

# –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É

def analyze_symbol(symbol):
    results = {}
    for tf in TIMEFRAMES:
        df = get_candles(symbol, tf, limit=50)
        if df is None or df.empty:
            results[tf] = None
            continue

        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df["EMA20"] = EMA(df["close"], 20)
        df["RSI14"] = RSI(df["close"], 14)
        macd_line, signal_line, hist = MACD(df["close"])
        df["MACD_line"] = macd_line
        df["Signal_line"] = signal_line
        df["MACD_hist"] = hist
        df["ATR14"] = ATR(df)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        bullish_engulfing = is_bullish_engulfing(df)
        bearish_engulfing = is_bearish_engulfing(df)
        hammer = is_hammer(df)
        doji = is_doji(df)

        # –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è, —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
        signal = "–û–∂–∏–¥–∞–Ω–∏–µ"

        # MACD - –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞
        macd_cross_up = (df["MACD_line"].iloc[-2] < df["Signal_line"].iloc[-2]) and (df["MACD_line"].iloc[-1] > df["Signal_line"].iloc[-1])
        macd_cross_down = (df["MACD_line"].iloc[-2] > df["Signal_line"].iloc[-2]) and (df["MACD_line"].iloc[-1] < df["Signal_line"].iloc[-1])

        # RSI —É—Ä–æ–≤–Ω–∏
        rsi = df["RSI14"].iloc[-1]
        rsi_overbought = rsi > 70
        rsi_oversold = rsi < 30

        # EMA —Ç—Ä–µ–Ω–¥
        ema_trend_up = df["close"].iloc[-1] > df["EMA20"].iloc[-1]
        ema_trend_down = df["close"].iloc[-1] < df["EMA20"].iloc[-1]

        # –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        if macd_cross_up and ema_trend_up and not rsi_overbought:
            if bullish_engulfing:
                signal = "–°–∏–ª—å–Ω—ã–π –õ–æ–Ω–≥ üìà (–ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)"
            elif hammer:
                signal = "–õ–æ–Ω–≥ üìà (–ü–∞—Ç—Ç–µ—Ä–Ω –ú–æ–ª–æ—Ç)"
            elif doji:
                signal = "–õ–æ–Ω–≥ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é (–î–æ–¥–∂–∏ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)"
            else:
                signal = "–õ–æ–Ω–≥ üìà (MACD –∏ EMA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç)"
        elif macd_cross_down and ema_trend_down and not rsi_oversold:
            if bearish_engulfing:
                signal = "–°–∏–ª—å–Ω—ã–π –®–æ—Ä—Ç üìâ (–ú–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)"
            elif hammer:
                signal = "–®–æ—Ä—Ç üìâ (–ü–∞—Ç—Ç–µ—Ä–Ω –ú–æ–ª–æ—Ç, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)"
            elif doji:
                signal = "–®–æ—Ä—Ç —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é (–î–æ–¥–∂–∏ - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)"
            else:
                signal = "–®–æ—Ä—Ç üìâ (MACD –∏ EMA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç)"
        else:
            signal = "–û–∂–∏–¥–∞–Ω–∏–µ (–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞)"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º
        explanation = (
            f"RSI: {rsi:.2f} {'(–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω)' if rsi_overbought else '(–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)' if rsi_oversold else '(–Ω–æ—Ä–º–∞)'}\n"
            f"MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {df['MACD_hist'].iloc[-1]:.5f}\n"
            f"EMA20: {df['EMA20'].iloc[-1]:.5f}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞: Open {df['open'].iloc[-1]:.5f}, Close {df['close'].iloc[-1]:.5f}\n"
            f"–ü–∞—Ç—Ç–µ—Ä–Ω—ã: "
            + (("–ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ, " if bullish_engulfing else "") +
               ("–ú–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ, " if bearish_engulfing else "") +
               ("–ú–æ–ª–æ—Ç, " if hammer else "") +
               ("–î–æ–¥–∂–∏, " if doji else "")).rstrip(", ") +
            "\n"
        )

        results[tf] = {
            "signal": signal,
            "explanation": explanation,
            "data": df.tail(3).to_dict(orient="records")  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        }
    return results


def analyze(symbols):
    all_results = {}
    for symbol in symbols:
        res = analyze_symbol(symbol)
        all_results[symbol] = res

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    messages = []
    for symbol, res in all_results.items():
        messages.append(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}:\n")
        for tf, data in res.items():
            if data is None:
                messages.append(f"{tf}: ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n")
            else:
                messages.append(f"{tf}: {data['signal']}\n{data['explanation']}")
    full_message = "\n".join(messages)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (—Ç–≤–æ–π –∫–æ–¥)
    send_telegram_message(full_message)


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤ —Ç–≤–æ–µ–º –∫–æ–¥–µ –æ–Ω–∞ –µ—Å—Ç—å, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
def send_telegram_message(text):
    # –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ —É —Ç–µ–±—è —Å–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    pass

