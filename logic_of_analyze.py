# File: logic_of_analyze.py
import os
import time
import hmac
import hashlib
import requests
import pandas as pd
import numpy as np
from datetime import datetime
from your_telegram_module import send_telegram

API_KEY = os.getenv("BINGX_API_KEY")
API_SECRET = os.getenv("BINGX_API_SECRET")
BASE_URL = "https://api.bingx.com/api/v3/futures"
HEADERS = {
    'Content-Type': 'application/json',
    'X-API-KEY': API_KEY,
}

def log_debug(msg):
    timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    send_telegram(f"My CryptoFTW bot:\nüêû DEBUG [{timestamp}]:\n{msg}")

def sign_request(params: dict, secret: str):
    query_string = "&".join(f"{key}={params[key]}" for key in sorted(params))
    return hmac.new(secret.encode(), query_string.encode(), hashlib.sha256).hexdigest()

def get_klines(symbol: str, interval: str, limit=100):
    path = "/market/kline"
    url = BASE_URL + path
    params = {"symbol": symbol, "interval": interval, "limit": limit}
    params['signature'] = sign_request(params, API_SECRET)
    try:
        response = requests.get(url, params=params, headers=HEADERS, timeout=10)
        response.raise_for_status()
        data = response.json()
        if 'data' in data and data['data']:
            df = pd.DataFrame(data['data'])
            for col in ['open', 'close', 'high', 'low', 'volume']:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            return df.sort_values('time')
        log_debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {symbol} {interval}: {data}")
    except Exception as e:
        log_debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {symbol} {interval}: {e}")
    return pd.DataFrame()

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
def EMA(series, period):
    return series.ewm(span=period, adjust=False).mean()

def MACD(df):
    ema12 = EMA(df['close'], 12)
    ema26 = EMA(df['close'], 26)
    macd_line = ema12 - ema26
    signal = macd_line.ewm(span=9, adjust=False).mean()
    hist = macd_line - signal
    return macd_line, signal, hist

def RSI(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(period).mean()
    avg_loss = loss.rolling(period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi.fillna(50)  # –µ—Å–ª–∏ NaN ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º

def ATR(df, period=14):
    high_low = df['high'] - df['low']
    high_close = abs(df['high'] - df['close'].shift())
    low_close = abs(df['low'] - df['close'].shift())
    tr = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
    return tr.rolling(period).mean()

# –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ‚Äî —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
def bullish_engulfing(df):
    if len(df) < 2:
        return False
    prev = df.iloc[-2]
    curr = df.iloc[-1]
    cond = (
        prev['close'] < prev['open'] and
        curr['close'] > curr['open'] and
        curr['open'] < prev['close'] and
        curr['close'] > prev['open']
    )
    return cond

def bearish_engulfing(df):
    if len(df) < 2:
        return False
    prev = df.iloc[-2]
    curr = df.iloc[-1]
    cond = (
        prev['close'] > prev['open'] and
        curr['close'] < curr['open'] and
        curr['open'] > prev['close'] and
        curr['close'] < prev['open']
    )
    return cond

def hammer(df):
    if len(df) < 1:
        return False
    candle = df.iloc[-1]
    body = abs(candle['close'] - candle['open'])
    lower_shadow = candle['open'] - candle['low'] if candle['close'] > candle['open'] else candle['close'] - candle['low']
    upper_shadow = candle['high'] - max(candle['close'], candle['open'])
    cond = lower_shadow > 2 * body and upper_shadow < body * 0.3
    return cond

def inverted_hammer(df):
    if len(df) < 1:
        return False
    candle = df.iloc[-1]
    body = abs(candle['close'] - candle['open'])
    upper_shadow = candle['high'] - max(candle['close'], candle['open'])
    lower_shadow = min(candle['close'], candle['open']) - candle['low']
    cond = upper_shadow > 2 * body and lower_shadow < body * 0.3
    return cond

def doji(df, threshold=0.1):
    if len(df) < 1:
        return False
    candle = df.iloc[-1]
    body = abs(candle['close'] - candle['open'])
    candle_range = candle['high'] - candle['low']
    cond = body <= candle_range * threshold
    return cond

def evening_star(df):
    # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω "–í–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞" –∏–∑ 3 —Å–≤–µ—á–µ–π (–º–µ–¥–≤–µ–∂–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç)
    if len(df) < 3:
        return False
    c1, c2, c3 = df.iloc[-3], df.iloc[-2], df.iloc[-1]
    cond1 = c1['close'] > c1['open']  # –ø–µ—Ä–≤–∞—è —Å–≤–µ—á–∞ ‚Äî –±—ã—á—å—è
    cond2 = abs(c2['close'] - c2['open']) < (c2['high'] - c2['low']) * 0.3  # –≤—Ç–æ—Ä–∞—è ‚Äî –¥–æ–¥–∂–∏ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ
    cond3 = c3['close'] < c3['open'] and c3['close'] < (c1['close'] + c1['open']) / 2  # —Ç—Ä–µ—Ç—å—è ‚Äî —Å–∏–ª—å–Ω–∞—è –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∏–∂–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –ø–µ—Ä–≤–æ–π
    return cond1 and cond2 and cond3

def morning_star(df):
    # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞" –∏–∑ 3 —Å–≤–µ—á–µ–π (–±—ã—á–∏–π —Ä–∞–∑–≤–æ—Ä–æ—Ç)
    if len(df) < 3:
        return False
    c1, c2, c3 = df.iloc[-3], df.iloc[-2], df.iloc[-1]
    cond1 = c1['close'] < c1['open']  # –ø–µ—Ä–≤–∞—è —Å–≤–µ—á–∞ ‚Äî –º–µ–¥–≤–µ–∂—å—è
    cond2 = abs(c2['close'] - c2['open']) < (c2['high'] - c2['low']) * 0.3  # –≤—Ç–æ—Ä–∞—è ‚Äî –¥–æ–¥–∂–∏ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ
    cond3 = c3['close'] > c3['open'] and c3['close'] > (c1['close'] + c1['open']) / 2  # —Ç—Ä–µ—Ç—å—è ‚Äî —Å–∏–ª—å–Ω–∞—è –±—ã—á—å—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –ø–µ—Ä–≤–æ–π
    return cond1 and cond2 and cond3

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
def analyze_symbol(symbol: str):
    intervals = ['1m', '5m', '15m', '1h']
    results = {}

    for interval in intervals:
        df = get_klines(symbol, interval)
        if df.empty or len(df) < 30:
            results[interval] = {"signal": None, "explanation": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."}
            continue

        macd_line, signal_line, hist = MACD(df)
        rsi = RSI(df['close'])
        atr = ATR(df)

        last_macd = macd_line.iloc[-1]
        last_signal = signal_line.iloc[-1]
        last_rsi = rsi.iloc[-1]
        last_close = df['close'].iloc[-1]
        last_atr = atr.iloc[-1]
        volume = df['volume'].iloc[-1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns_found = []
        pattern_messages = []
        if bullish_engulfing(df):
            patterns_found.append("–ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ (Bullish Engulfing)")
            pattern_messages.append("üíö –ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ ‚Äî —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–≤–µ—Ä—Ö.")
        if bearish_engulfing(df):
            patterns_found.append("–ú–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ (Bearish Engulfing)")
            pattern_messages.append("üî¥ –ú–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ ‚Äî —Å–∏–≥–Ω–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–Ω–∏–∑.")
        if hammer(df):
            patterns_found.append("–ú–æ–ª–æ—Ç (Hammer)")
            pattern_messages.append("üîπ –ú–æ–ª–æ—Ç ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è.")
        if inverted_hammer(df):
            patterns_found.append("–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–π –º–æ–ª–æ—Ç (Inverted Hammer)")
            pattern_messages.append("üî∏ –ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–π –º–æ–ª–æ—Ç ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ –≤–≤–µ—Ä—Ö.")
        if doji(df):
            patterns_found.append("–î–æ–¥–∂–∏ (Doji)")
            pattern_messages.append("‚ö™ –î–æ–¥–∂–∏ ‚Äî –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞, –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç.")
        if evening_star(df):
            patterns_found.append("–í–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞ (Evening Star)")
            pattern_messages.append("üåí –í–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞ ‚Äî —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω, –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑.")
        if morning_star(df):
            patterns_found.append("–£—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞ (Morning Star)")
            pattern_messages.append("üåï –£—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞ ‚Äî —Å–∏–ª—å–Ω—ã–π –±—ã—á–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω, –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö.")
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        reasons = []
        signal = "–û–∂–∏–¥–∞–Ω–∏–µ"

        # MACD –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        if last_macd > last_signal:
            reasons.append("MACD –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—á–∏–π –Ω–∞—Å—Ç—Ä–æ–π (–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏).")
        else:
            reasons.append("MACD –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–¥–≤–µ–∂–∏–π –Ω–∞—Å—Ç—Ä–æ–π (–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –Ω–∏–∂–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏).")

        # RSI ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
        if last_rsi > 70:
            reasons.append("RSI –≤—ã—à–µ 70 ‚Äî —Ä—ã–Ω–æ–∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç–∫–∞—Ç –≤–Ω–∏–∑.")
        elif last_rsi < 30:
            reasons.append("RSI –Ω–∏–∂–µ 30 ‚Äî —Ä—ã–Ω–æ–∫ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö.")
        else:
            reasons.append(f"RSI –≤ –∑–æ–Ω–µ {round(last_rsi,1)} ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥.")

        # –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if patterns_found:
            reasons.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
            reasons.extend(pattern_messages)

        # –û–±—ä—ë–º ‚Äî —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
        if volume < 10:
            reasons.append("‚ö†Ô∏è –û–±—ä—ë–º –Ω–∏–∑–∫–∏–π, —Å–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∞–±—ã–º –∏ –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–º.")

        # –ò—Ç–æ–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        bullish_conditions = (
            last_macd > last_signal and last_rsi < 60 and
            any(p in patterns_found for p in [
                "–ë—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ (Bullish Engulfing)",
                "–ú–æ–ª–æ—Ç (Hammer)",
                "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞ (Morning Star)"
            ])
        )
        bearish_conditions = (
            last_macd < last_signal and last_rsi > 40 and
            any(p in patterns_found for p in [
                "–ú–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ (Bearish Engulfing)",
                "–í–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞ (Evening Star)"
            ])
        )

        if bullish_conditions:
            signal = "–õ–æ–Ω–≥"
            reasons.append("üìà –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ö–æ–¥–∏—Ç—å –≤ –õ–æ–Ω–≥ ‚Äî —Å–∏–≥–Ω–∞–ª—ã —Å—Ö–æ–¥—è—Ç—Å—è.")
        elif bearish_conditions:
            signal = "–®–æ—Ä—Ç"
            reasons.append("üìâ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ö–æ–¥–∏—Ç—å –≤ –®–æ—Ä—Ç ‚Äî —Å–∏–≥–Ω–∞–ª—ã —Å—Ö–æ–¥—è—Ç—Å—è.")
        else:
            reasons.append("‚è≥ –°–∏–≥–Ω–∞–ª—ã —Å–º–µ—à–∞–Ω–Ω—ã–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

        stop_loss = last_close - 1.5 * last_atr if signal == "–õ–æ–Ω–≥" else last_close + 1.5 * last_atr
        take_profit = last_close + 3 * last_atr if signal == "–õ–æ–Ω–≥" else last_close - 3 * last_atr

        explanation = "\n".join(reasons)

        results[interval] = {
            "signal": signal,
            "close": round(last_close, 6),
            "rsi": round(last_rsi, 2),
            "macd_hist": round(hist.iloc[-1], 6),
            "stop_loss": round(stop_loss, 6),
            "take_profit": round(take_profit, 6),
            "volume": round(volume, 2),
            "explanation": explanation
        }

    return results # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å, –≤–Ω–µ —Ü–∏–∫–ª–∞ for interval

def analyze(symbols):
    messages = []
    for symbol in symbols:
        analysis = analyze_symbol(symbol)
        msg = f"üöÄ –ê–Ω–∞–ª–∏–∑ –ø–æ {symbol} üöÄ\n\n"
        for interval, res in analysis.items():
            if res["signal"] is None:
                msg += f"‚è≥ {interval}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            else:
                # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, —á–µ–ª–æ–≤–µ—á–Ω—ã–π —Å—Ç–∏–ª—å —Å —ç–º–æ–¥–∑–∏ –∏ —è—Å–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
                msg += (
                    f"‚è∞ {interval}\n"
                    f"–°–∏–≥–Ω–∞–ª: {res['signal']}\n"
                    f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {res['close']}\n"
                    f"RSI: {res['rsi']} | MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {res['macd_hist']}\n"
                    f"–û–±—ä—ë–º: {res['volume']}\n"
                    f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {res['stop_loss']} | üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {res['take_profit']}\n"
                    f"üîç –ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{res['explanation']}\n\n"
                )
        messages.append(msg)
        log_debug(msg) # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å, –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ for symbol, –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    return messages
